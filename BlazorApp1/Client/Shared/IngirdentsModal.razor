@using BlazorApp1.Shared.Models
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject IJSRuntime jsRuntime

@if (ModalDisplay == true)
{
    <div class="modal fade show d-block scale-up-center" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                    <button @onclick="() => onconfirmationchanged(false)" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Select Element:
                    <EditForm Model="@user">
                        <InputSelect @bind-Value="@id">
                            @foreach (var item in users)
                                {
                                <option value="@item.IconName">@item.Name</option>
                                }
                        </InputSelect>
                    </EditForm>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => onconfirmationchanged(false)">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => onconfirmationchanged(true)">Select</button>
                </div>
            </div>
        </div>
    </div>

}

@code {
    public List<salam> users { get; set; } = new List<salam>();
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<salam>>("api/User/users");
    }
    [Parameter]
    public ElementReference clickedelement { get; set; }
    protected bool ModalDisplay { get; set; }
    public salam user { get; set; } = new salam();
    public string id { get; set; }
    [Parameter]
    public EventCallback<string> ids { get; set; }
    public void Open()
    {
        id = (user.IconName);
        ModalDisplay = true;
        StateHasChanged();
    }


    protected void onconfirmationchanged(bool value)
    {
        if (value)
        {
            ids.InvokeAsync(id);
            jsRuntime.InvokeAsync<object>("ShowAlert", clickedelement,id);
        }
        ModalDisplay = false;
    }
}
